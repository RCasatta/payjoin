<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>librustc-nightly_rt.asan.dylib`__asan_memcpy (19 samples, 0.17%)</title><rect x="0.1330%" y="165" width="0.1685%" height="15" fill="rgb(227,0,7)"/><text x="0.3830%" y="175.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::Allocator::Deallocate (45 samples, 0.40%)</title><rect x="0.4522%" y="149" width="0.3990%" height="15" fill="rgb(217,0,24)"/><text x="0.7022%" y="159.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::RunFreeHooks (21 samples, 0.19%)</title><rect x="0.6651%" y="133" width="0.1862%" height="15" fill="rgb(221,193,54)"/><text x="0.9151%" y="143.50"></text></g><g><title>rt`fuzzer::FreeHook (17 samples, 0.15%)</title><rect x="0.7005%" y="117" width="0.1507%" height="15" fill="rgb(248,212,6)"/><text x="0.9505%" y="127.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::StackDepotPut (31 samples, 0.27%)</title><rect x="1.2769%" y="133" width="0.2749%" height="15" fill="rgb(208,68,35)"/><text x="1.5269%" y="143.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (29 samples, 0.26%)</title><rect x="1.2947%" y="117" width="0.2572%" height="15" fill="rgb(232,128,0)"/><text x="1.5447%" y="127.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::Allocator::QuarantineChunk (82 samples, 0.73%)</title><rect x="0.8513%" y="149" width="0.7271%" height="15" fill="rgb(207,160,47)"/><text x="1.1013%" y="159.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::BufferedStackTrace::UnwindImpl (37 samples, 0.33%)</title><rect x="1.6494%" y="149" width="0.3281%" height="15" fill="rgb(228,23,34)"/><text x="1.8994%" y="159.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::BufferedStackTrace::UnwindFast (28 samples, 0.25%)</title><rect x="1.7292%" y="133" width="0.2483%" height="15" fill="rgb(218,30,26)"/><text x="1.9792%" y="143.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`wrap_free (188 samples, 1.67%)</title><rect x="0.3281%" y="165" width="1.6671%" height="15" fill="rgb(220,122,19)"/><text x="0.5781%" y="175.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`MemcmpInterceptorCommon(void*, int (*)(void const*, void const*, unsigned long), void const*, void const*, unsigned long) (21 samples, 0.19%)</title><rect x="2.0041%" y="149" width="0.1862%" height="15" fill="rgb(250,228,42)"/><text x="2.2541%" y="159.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`wrap_memcmp (26 samples, 0.23%)</title><rect x="2.0041%" y="165" width="0.2306%" height="15" fill="rgb(240,193,28)"/><text x="2.2541%" y="175.50"></text></g><g><title>rt`__sanitizer_cov_trace_cmp8 (42 samples, 0.37%)</title><rect x="2.2878%" y="165" width="0.3724%" height="15" fill="rgb(216,20,37)"/><text x="2.5378%" y="175.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp1 (18 samples, 0.16%)</title><rect x="2.6603%" y="165" width="0.1596%" height="15" fill="rgb(206,188,39)"/><text x="2.9103%" y="175.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp8 (77 samples, 0.68%)</title><rect x="2.8642%" y="165" width="0.6828%" height="15" fill="rgb(217,207,13)"/><text x="3.1142%" y="175.50"></text></g><g><title>rt`bmp_monochrome::Bmp::get (20 samples, 0.18%)</title><rect x="3.5470%" y="165" width="0.1774%" height="15" fill="rgb(231,73,38)"/><text x="3.7970%" y="175.50"></text></g><g><title>rt`bmp_monochrome::bit::BitStreamReader::read (15 samples, 0.13%)</title><rect x="3.7244%" y="165" width="0.1330%" height="15" fill="rgb(225,20,46)"/><text x="3.9744%" y="175.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::QuickCheckForUnpoisonedRegion (19 samples, 0.17%)</title><rect x="8.1759%" y="133" width="0.1685%" height="15" fill="rgb(210,31,41)"/><text x="8.4259%" y="143.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan_memcpy (69 samples, 0.61%)</title><rect x="7.9986%" y="149" width="0.6119%" height="15" fill="rgb(221,200,47)"/><text x="8.2486%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (25 samples, 0.22%)</title><rect x="8.3888%" y="133" width="0.2217%" height="15" fill="rgb(226,26,5)"/><text x="8.6388%" y="143.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate(__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64 (25 samples, 0.22%)</title><rect x="9.3553%" y="101" width="0.2217%" height="15" fill="rgb(249,33,26)"/><text x="9.6053%" y="111.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt; &gt;::Refill(__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt; &gt;::PerClass*, __sanitizer::SizeClassAllocator64&lt;__asan::AP64 (13 samples, 0.12%)</title><rect x="9.4617%" y="85" width="0.1153%" height="15" fill="rgb(235,183,28)"/><text x="9.7117%" y="95.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::GetFromAllocator (13 samples, 0.12%)</title><rect x="9.4617%" y="69" width="0.1153%" height="15" fill="rgb(221,5,38)"/><text x="9.7117%" y="79.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::PopulateFreeArray(__sanitizer::AllocatorStats*, unsigned long, __sanitizer::SizeClassAllocator64&lt;__asan::AP64 (13 samples, 0.12%)</title><rect x="9.4617%" y="53" width="0.1153%" height="15" fill="rgb(247,18,42)"/><text x="9.7117%" y="63.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::StackDepotPut (26 samples, 0.23%)</title><rect x="9.6834%" y="101" width="0.2306%" height="15" fill="rgb(241,131,45)"/><text x="9.9334%" y="111.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (25 samples, 0.22%)</title><rect x="9.6923%" y="85" width="0.2217%" height="15" fill="rgb(249,31,29)"/><text x="9.9423%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (17 samples, 0.15%)</title><rect x="9.9140%" y="101" width="0.1507%" height="15" fill="rgb(225,111,53)"/><text x="10.1640%" y="111.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::Allocator::Allocate (156 samples, 1.38%)</title><rect x="8.6903%" y="117" width="1.3833%" height="15" fill="rgb(238,160,17)"/><text x="8.9403%" y="127.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::asan_malloc (159 samples, 1.41%)</title><rect x="8.6903%" y="133" width="1.4099%" height="15" fill="rgb(214,148,48)"/><text x="8.9403%" y="143.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::BufferedStackTrace::UnwindFast (21 samples, 0.19%)</title><rect x="10.2421%" y="117" width="0.1862%" height="15" fill="rgb(232,36,49)"/><text x="10.4921%" y="127.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`wrap_malloc (202 samples, 1.79%)</title><rect x="8.6548%" y="149" width="1.7913%" height="15" fill="rgb(209,103,24)"/><text x="8.9048%" y="159.50">l..</text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::BufferedStackTrace::UnwindImpl (39 samples, 0.35%)</title><rect x="10.1002%" y="133" width="0.3458%" height="15" fill="rgb(229,88,8)"/><text x="10.3502%" y="143.50"></text></g><g><title>rt`__sanitizer_cov_trace_cmp1 (25 samples, 0.22%)</title><rect x="10.4726%" y="149" width="0.2217%" height="15" fill="rgb(213,181,19)"/><text x="10.7226%" y="159.50"></text></g><g><title>rt`__sanitizer_cov_trace_cmp8 (170 samples, 1.51%)</title><rect x="10.6943%" y="149" width="1.5075%" height="15" fill="rgb(254,191,54)"/><text x="10.9443%" y="159.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp1 (148 samples, 1.31%)</title><rect x="12.2018%" y="149" width="1.3124%" height="15" fill="rgb(241,83,37)"/><text x="12.4518%" y="159.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp8 (426 samples, 3.78%)</title><rect x="13.5142%" y="149" width="3.7776%" height="15" fill="rgb(233,36,39)"/><text x="13.7642%" y="159.50">rt`_..</text></g><g><title>rt`__sanitizer_cov_trace_cmp8 (54 samples, 0.48%)</title><rect x="25.4589%" y="117" width="0.4789%" height="15" fill="rgb(226,3,54)"/><text x="25.7089%" y="127.50"></text></g><g><title>rt`&lt;std::io::cursor::Cursor&lt;T&gt; as std::io::Read&gt;::read_exact (149 samples, 1.32%)</title><rect x="24.8559%" y="133" width="1.3213%" height="15" fill="rgb(245,192,40)"/><text x="25.1059%" y="143.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp8 (27 samples, 0.24%)</title><rect x="25.9377%" y="117" width="0.2394%" height="15" fill="rgb(238,167,29)"/><text x="26.1877%" y="127.50"></text></g><g><title>rt`__sanitizer_cov_trace_cmp1 (264 samples, 2.34%)</title><rect x="26.1772%" y="133" width="2.3410%" height="15" fill="rgb(232,182,51)"/><text x="26.4272%" y="143.50">r..</text></g><g><title>rt`__sanitizer_cov_trace_const_cmp1 (1,193 samples, 10.58%)</title><rect x="28.5360%" y="133" width="10.5791%" height="15" fill="rgb(231,60,39)"/><text x="28.7860%" y="143.50">rt`__sanitizer_..</text></g><g><title>rt`__sanitizer_cov_trace_pc_indir (63 samples, 0.56%)</title><rect x="39.1327%" y="133" width="0.5587%" height="15" fill="rgb(208,69,12)"/><text x="39.3827%" y="143.50"></text></g><g><title>rt`bmp_monochrome::bit::BitStreamReader::read (2,529 samples, 22.43%)</title><rect x="17.3273%" y="149" width="22.4262%" height="15" fill="rgb(235,93,37)"/><text x="17.5773%" y="159.50">rt`bmp_monochrome::bit::BitStreamRea..</text></g><g><title>rt`bmp_monochrome::decode::_&lt;impl bmp_monochrome::Bmp&gt;::read (4,042 samples, 35.84%)</title><rect x="3.9461%" y="165" width="35.8429%" height="15" fill="rgb(213,116,39)"/><text x="4.1961%" y="175.50">rt`bmp_monochrome::decode::_&lt;impl bmp_monochrome::Bmp&gt;::re..</text></g><g><title>librustc-nightly_rt.asan.dylib`DYLD-STUB$$memcpy (19 samples, 0.17%)</title><rect x="42.2630%" y="149" width="0.1685%" height="15" fill="rgb(222,207,29)"/><text x="42.5130%" y="159.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::QuickCheckForUnpoisonedRegion (30 samples, 0.27%)</title><rect x="42.4315%" y="149" width="0.2660%" height="15" fill="rgb(206,96,30)"/><text x="42.6815%" y="159.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::QuickCheckForUnpoisonedRegion (267 samples, 2.37%)</title><rect x="45.0829%" y="133" width="2.3677%" height="15" fill="rgb(218,138,4)"/><text x="45.3329%" y="143.50">li..</text></g><g><title>librustc-nightly_rt.asan.dylib`__asan_memcpy (620 samples, 5.50%)</title><rect x="42.6975%" y="149" width="5.4979%" height="15" fill="rgb(250,191,14)"/><text x="42.9475%" y="159.50">librust..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (84 samples, 0.74%)</title><rect x="47.4506%" y="133" width="0.7449%" height="15" fill="rgb(239,60,40)"/><text x="47.7006%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.21%)</title><rect x="48.1954%" y="149" width="0.2128%" height="15" fill="rgb(206,27,48)"/><text x="48.4454%" y="159.50"></text></g><g><title>rt`__sanitizer_cov_trace_cmp1 (23 samples, 0.20%)</title><rect x="48.4083%" y="149" width="0.2040%" height="15" fill="rgb(225,35,8)"/><text x="48.6583%" y="159.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp1 (122 samples, 1.08%)</title><rect x="48.7009%" y="149" width="1.0818%" height="15" fill="rgb(250,213,24)"/><text x="48.9509%" y="159.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp8 (182 samples, 1.61%)</title><rect x="49.8005%" y="149" width="1.6139%" height="15" fill="rgb(247,123,22)"/><text x="50.0505%" y="159.50"></text></g><g><title>rt`__sanitizer_cov_trace_cmp8 (407 samples, 3.61%)</title><rect x="54.8107%" y="133" width="3.6091%" height="15" fill="rgb(231,138,38)"/><text x="55.0607%" y="143.50">rt`_..</text></g><g><title>rt`bmp_monochrome::Bmp::get (958 samples, 8.50%)</title><rect x="51.4410%" y="149" width="8.4952%" height="15" fill="rgb(231,145,46)"/><text x="51.6910%" y="159.50">rt`bmp_monoc..</text></g><g><title>rt`__sanitizer_cov_trace_const_cmp1 (171 samples, 1.52%)</title><rect x="58.4198%" y="133" width="1.5164%" height="15" fill="rgb(251,118,11)"/><text x="58.6698%" y="143.50"></text></g><g><title>rt`__sanitizer_cov_trace_cmp1 (331 samples, 2.94%)</title><rect x="67.0125%" y="133" width="2.9352%" height="15" fill="rgb(217,147,25)"/><text x="67.2625%" y="143.50">rt..</text></g><g><title>rt`__sanitizer_cov_trace_const_cmp1 (981 samples, 8.70%)</title><rect x="69.9832%" y="133" width="8.6991%" height="15" fill="rgb(247,81,37)"/><text x="70.2332%" y="143.50">rt`__sanitiz..</text></g><g><title>rt`__sanitizer_cov_trace_pc_indir (68 samples, 0.60%)</title><rect x="78.7798%" y="133" width="0.6030%" height="15" fill="rgb(209,12,38)"/><text x="79.0298%" y="143.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::QuickCheckForUnpoisonedRegion (42 samples, 0.37%)</title><rect x="82.2825%" y="69" width="0.3724%" height="15" fill="rgb(227,1,9)"/><text x="82.5325%" y="79.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`wrap_memcpy (159 samples, 1.41%)</title><rect x="81.5288%" y="85" width="1.4099%" height="15" fill="rgb(248,47,43)"/><text x="81.7788%" y="95.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::internal_memmove (32 samples, 0.28%)</title><rect x="82.6550%" y="69" width="0.2838%" height="15" fill="rgb(221,10,30)"/><text x="82.9050%" y="79.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::Allocator::Allocate (19 samples, 0.17%)</title><rect x="82.9476%" y="37" width="0.1685%" height="15" fill="rgb(210,229,1)"/><text x="83.1976%" y="47.50"></text></g><g><title>rt`&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8&gt;&gt; as std::io::Write&gt;::write (301 samples, 2.67%)</title><rect x="80.5001%" y="117" width="2.6691%" height="15" fill="rgb(222,148,37)"/><text x="80.7501%" y="127.50">rt..</text></g><g><title>rt`std::io::cursor::vec_write (281 samples, 2.49%)</title><rect x="80.6775%" y="101" width="2.4918%" height="15" fill="rgb(234,67,33)"/><text x="80.9275%" y="111.50">rt..</text></g><g><title>librustc-nightly_rt.asan.dylib`wrap_realloc (26 samples, 0.23%)</title><rect x="82.9387%" y="85" width="0.2306%" height="15" fill="rgb(247,98,35)"/><text x="83.1887%" y="95.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::asan_realloc (26 samples, 0.23%)</title><rect x="82.9387%" y="69" width="0.2306%" height="15" fill="rgb(247,138,52)"/><text x="83.1887%" y="79.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::Allocator::Reallocate (26 samples, 0.23%)</title><rect x="82.9387%" y="53" width="0.2306%" height="15" fill="rgb(213,79,30)"/><text x="83.1887%" y="63.50"></text></g><g><title>rt`__sanitizer_cov_trace_cmp8 (48 samples, 0.43%)</title><rect x="83.1693%" y="117" width="0.4256%" height="15" fill="rgb(246,177,23)"/><text x="83.4193%" y="127.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp8 (168 samples, 1.49%)</title><rect x="83.5949%" y="117" width="1.4898%" height="15" fill="rgb(230,62,27)"/><text x="83.8449%" y="127.50"></text></g><g><title>rt`std::io::Write::write_all (645 samples, 5.72%)</title><rect x="79.3828%" y="133" width="5.7196%" height="15" fill="rgb(216,154,8)"/><text x="79.6328%" y="143.50">rt`std:..</text></g><g><title>rt`bmp_monochrome::bit::BitStreamWriter::write (2,839 samples, 25.18%)</title><rect x="59.9716%" y="149" width="25.1751%" height="15" fill="rgb(244,35,45)"/><text x="60.2216%" y="159.50">rt`bmp_monochrome::bit::BitStreamWriter:..</text></g><g><title>rt`bmp_monochrome::encode::_&lt;impl bmp_monochrome::Bmp&gt;::write (5,124 samples, 45.44%)</title><rect x="39.7890%" y="165" width="45.4376%" height="15" fill="rgb(251,115,12)"/><text x="40.0390%" y="175.50">rt`bmp_monochrome::encode::_&lt;impl bmp_monochrome::Bmp&gt;::write</text></g><g><title>librustc-nightly_rt.asan.dylib`__asan_memcpy (30 samples, 0.27%)</title><rect x="87.4701%" y="149" width="0.2660%" height="15" fill="rgb(240,54,50)"/><text x="87.7201%" y="159.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate(__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64 (13 samples, 0.12%)</title><rect x="88.3391%" y="101" width="0.1153%" height="15" fill="rgb(233,84,52)"/><text x="88.5891%" y="111.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::StackDepotPut (26 samples, 0.23%)</title><rect x="88.5431%" y="101" width="0.2306%" height="15" fill="rgb(207,117,47)"/><text x="88.7931%" y="111.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (25 samples, 0.22%)</title><rect x="88.5519%" y="85" width="0.2217%" height="15" fill="rgb(249,43,39)"/><text x="88.8019%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (23 samples, 0.20%)</title><rect x="88.7736%" y="101" width="0.2040%" height="15" fill="rgb(209,38,44)"/><text x="89.0236%" y="111.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::Allocator::Allocate (133 samples, 1.18%)</title><rect x="87.8070%" y="117" width="1.1794%" height="15" fill="rgb(236,212,23)"/><text x="88.0570%" y="127.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__asan::asan_malloc (141 samples, 1.25%)</title><rect x="87.7982%" y="133" width="1.2503%" height="15" fill="rgb(242,79,21)"/><text x="88.0482%" y="143.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::BufferedStackTrace::UnwindFast (12 samples, 0.11%)</title><rect x="89.1372%" y="117" width="0.1064%" height="15" fill="rgb(211,96,35)"/><text x="89.3872%" y="127.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`wrap_malloc (170 samples, 1.51%)</title><rect x="87.7450%" y="149" width="1.5075%" height="15" fill="rgb(253,215,40)"/><text x="87.9950%" y="159.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`__sanitizer::BufferedStackTrace::UnwindImpl (23 samples, 0.20%)</title><rect x="89.0485%" y="133" width="0.2040%" height="15" fill="rgb(211,81,21)"/><text x="89.2985%" y="143.50"></text></g><g><title>rt`&lt;bool as arbitrary::Arbitrary&gt;::arbitrary (817 samples, 7.24%)</title><rect x="89.2968%" y="149" width="7.2448%" height="15" fill="rgb(208,190,38)"/><text x="89.5468%" y="159.50">rt`&lt;bool a..</text></g><g><title>rt`__sanitizer_cov_trace_const_cmp8 (231 samples, 2.05%)</title><rect x="94.4932%" y="133" width="2.0484%" height="15" fill="rgb(235,213,38)"/><text x="94.7432%" y="143.50">r..</text></g><g><title>rt`__sanitizer_cov_trace_cmp8 (184 samples, 1.63%)</title><rect x="96.5416%" y="149" width="1.6316%" height="15" fill="rgb(237,122,38)"/><text x="96.7916%" y="159.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp1 (158 samples, 1.40%)</title><rect x="98.1733%" y="149" width="1.4011%" height="15" fill="rgb(244,218,35)"/><text x="98.4233%" y="159.50"></text></g><g><title>rt`__sanitizer_cov_trace_const_cmp8 (18 samples, 0.16%)</title><rect x="99.5744%" y="149" width="0.1596%" height="15" fill="rgb(240,68,47)"/><text x="99.8244%" y="159.50"></text></g><g><title>rt`bmp_monochrome::fuzz::_&lt;impl arbitrary::Arbitrary for bmp_monochrome::Bmp&gt;::arbitrary (1,640 samples, 14.54%)</title><rect x="85.2266%" y="165" width="14.5429%" height="15" fill="rgb(210,16,53)"/><text x="85.4766%" y="175.50">rt`bmp_monochrome::fuz..</text></g><g><title>rt`fuzzer::Fuzzer::ExecuteCallback (11,248 samples, 99.74%)</title><rect x="0.0355%" y="229" width="99.7428%" height="15" fill="rgb(235,124,12)"/><text x="0.2855%" y="239.50">rt`fuzzer::Fuzzer::ExecuteCallback</text></g><g><title>rt`LLVMFuzzerTestOneInput (11,248 samples, 99.74%)</title><rect x="0.0355%" y="213" width="99.7428%" height="15" fill="rgb(224,169,11)"/><text x="0.2855%" y="223.50">rt`LLVMFuzzerTestOneInput</text></g><g><title>rt`__rust_try (11,248 samples, 99.74%)</title><rect x="0.0355%" y="197" width="99.7428%" height="15" fill="rgb(250,166,2)"/><text x="0.2855%" y="207.50">rt`__rust_try</text></g><g><title>rt`rust_fuzzer_test_input (11,244 samples, 99.71%)</title><rect x="0.0709%" y="181" width="99.7074%" height="15" fill="rgb(242,216,29)"/><text x="0.3209%" y="191.50">rt`rust_fuzzer_test_input</text></g><g><title>rt`fuzzer::Fuzzer::RunOne (11,256 samples, 99.81%)</title><rect x="0.0355%" y="245" width="99.8138%" height="15" fill="rgb(230,116,27)"/><text x="0.2855%" y="255.50">rt`fuzzer::Fuzzer::RunOne</text></g><g><title>rt`fuzzer::Fuzzer::MutateAndTestOne (11,259 samples, 99.84%)</title><rect x="0.0177%" y="261" width="99.8404%" height="15" fill="rgb(228,99,48)"/><text x="0.2677%" y="271.50">rt`fuzzer::Fuzzer::MutateAndTestOne</text></g><g><title>rt`fuzzer::Fuzzer::Loop(std::__1::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator (11,260 samples, 99.85%)</title><rect x="0.0177%" y="277" width="99.8493%" height="15" fill="rgb(253,11,6)"/><text x="0.2677%" y="287.50">rt`fuzzer::Fuzzer::Loop(std::__1::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator</text></g><g><title>rt`fuzzer::InputCorpus::InputCorpus(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (12 samples, 0.11%)</title><rect x="99.8670%" y="277" width="0.1064%" height="15" fill="rgb(247,143,39)"/><text x="100.1170%" y="287.50"></text></g><g><title>librustc-nightly_rt.asan.dylib`wrap___bzero (12 samples, 0.11%)</title><rect x="99.8670%" y="261" width="0.1064%" height="15" fill="rgb(236,97,10)"/><text x="100.1170%" y="271.50"></text></g><g><title>all (11,277 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="367.50"></text></g><g><title>rt`0x1 (11,277 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="351.50">rt`0x1</text></g><g><title>libdyld.dylib`start (11,277 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>rt`main (11,277 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="319.50">rt`main</text></g><g><title>rt`fuzzer::FuzzerDriver(int*, char***, int (*) (11,277 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="303.50">rt`fuzzer::FuzzerDriver(int*, char***, int (*)</text></g></svg></svg>